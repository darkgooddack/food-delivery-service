name: CI for FastAPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  fastapi-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user" --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run FastAPI tests
        run: |
          pytest --maxfail=1 --disable-warnings -q || exit_code=$?
          if [ "$exit_code" -ne 5 ] && [ "$exit_code" -ne 0 ]; then exit $exit_code; fi

  docker-deploy:
    runs-on: ubuntu-latest
    needs: fastapi-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Create .env file from secrets
        run: |
          echo "DB__USER=${{ secrets.DB__USER }}" >> .env
          echo "DB__PASSWORD=${{ secrets.DB__PASSWORD }}" >> .env
          echo "DB__NAME=${{ secrets.DB__NAME }}" >> .env
          echo "DB__HOST=${{ secrets.DB__HOST }}" >> .env
          echo "DB__PORT=${{ secrets.DB__PORT }}" >> .env
          echo "JWT__SECRET_KEY=${{ secrets.JWT__SECRET_KEY }}" >> .env
          echo "JWT__ALGORITHM=${{ secrets.JWT__ALGORITHM }}" >> .env
          echo "JWT__ACCESS_EXPIRE_MIN=${{ secrets.JWT__ACCESS_EXPIRE_MIN }}" >> .env
          echo "JWT__REFRESH_EXPIRE_DAYS=${{ secrets.JWT__REFRESH_EXPIRE_DAYS }}" >> .env
          echo "API__PREFIX=${{ secrets.API__PREFIX }}" >> .env
          echo "REDIS__HOST=${{ secrets.REDIS__HOST }}" >> .env
          echo "REDIS__PORT=${{ secrets.REDIS__PORT }}" >> .env
          echo "REDIS__DB=${{ secrets.REDIS__DB }}" >> .env
          echo "STRIPE__SECRET_KEY=${{ secrets.STRIPE__SECRET_KEY }}" >> .env
          echo "STRIPE__PUBLIC_KEY=${{ secrets.STRIPE__PUBLIC_KEY }}" >> .env

      - name: Run docker-compose
        run: docker-compose -f docker-compose.yml up --build -d
        env:
          DB__HOST: ${{ secrets.DB__HOST }}
          DB__PORT: ${{ secrets.DB__PORT }}
          DB__NAME: ${{ secrets.DB__NAME }}
          DB__USER: ${{ secrets.DB__USER }}
          DB__PASSWORD: ${{ secrets.DB__PASSWORD }}
          JWT__SECRET_KEY: ${{ secrets.JWT__SECRET_KEY }}
          JWT__ALGORITHM: ${{ secrets.JWT__ALGORITHM }}
          JWT__ACCESS_EXPIRE_MIN: ${{ secrets.JWT__ACCESS_EXPIRE_MIN }}
          JWT__REFRESH_EXPIRE_DAYS: ${{ secrets.JWT__REFRESH_EXPIRE_DAYS }}
          API__PREFIX: ${{ secrets.API__PREFIX }}
          REDIS__HOST: ${{ secrets.REDIS__HOST }}
          REDIS__PORT: ${{ secrets.REDIS__PORT }}
          REDIS__DB: ${{ secrets.REDIS__DB }}
          STRIPE__SECRET_KEY: ${{ secrets.STRIPE__SECRET_KEY }}
          STRIPE__PUBLIC_KEY: ${{ secrets.STRIPE__PUBLIC_KEY }}

      - name: Clean up Docker containers
        run: docker-compose -f docker-compose.yml down
